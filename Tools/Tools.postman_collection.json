{
	"info": {
		"_postman_id": "00aec3c4-e9fc-47d5-87d8-ff45d3eb2543",
		"name": "Tools",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Errors",
			"item": [
				{
					"name": "add product details - incorrect body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.error;",
									"     ",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['error'];",
									"    pm.expect(message).to.eql('API Event body did not contain the brand.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User1\",\n    \"email\": \"test.user1@gmail.com\",\n    \"message\": \"A test message\"\n}"
						},
						"url": {
							"raw": "https://{{tools_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/tools/notfound/12345678",
							"protocol": "https",
							"host": [
								"{{tools_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"tools",
								"notfound",
								"12345678"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "add product details - missing product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.error;",
									"     ",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['error'];",
									"    pm.expect(message).to.eql('No product returned for the id 12345678.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"brand\": \"BABYBJÃ–RN\",\n    \"details\": \"Baby Carrier One, Cotton Mix, Denim Grey/Dark Grey\",\n    \"retailer\": \"amazon.co.uk\",\n    \"imageUrl\": \"//ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B0792ZS2GP&Format=_SL250_&ID=AsinImage&MarketPlace=GB&ServiceVersion=20070822&WS=1&tag=ewelists-21&language=en_GB\",\n    \"price\": \"100.00\",\n    \"productUrl\": \"https://www.amazon.co.uk/dp/B0792ZS2GP/ref=as_li_ss_il?ie=UTF8&linkCode=li3&tag=ewelists-21&linkId=00f788f132fc05940f26eb7f88a48a7c&language=en_GB\"\n}"
						},
						"url": {
							"raw": "https://{{tools_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/tools/notfound/12345678",
							"protocol": "https",
							"host": [
								"{{tools_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"tools",
								"notfound",
								"12345678"
							]
						},
						"description": "Create list"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Update users gifts",
			"item": [
				{
					"name": "create list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "836c1302-e36a-42e1-9505-dc049f97949e",
								"exec": [
									"pm.test(\"Add variable for new List ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    listId = jsonData[\"listId\"];",
									"    pm.environment.set(\"list_id\", listId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var listId = jsonData['listId'];",
									"    pm.expect(listId.length).to.eql(36);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Birthday List\",\n    \"description\": \"A gift wish list for my birthday.\",\n    \"eventDate\": \"20 December 2020\",\n    \"occasion\": \"Birthday\",\n    \"imageUrl\": \"/images/celebration-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "create notfound product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "550bdf47-6c33-4fad-bd9d-210dfa4008ee",
								"exec": [
									"pm.test(\"Add variable for new Product ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    productId = jsonData[\"productId\"];",
									"    pm.environment.set(\"nf_product_id\", productId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var productId = jsonData['productId'];",
									"    pm.expect(productId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"brand\": \"BABYBJÃ–RN\",\n    \"details\": \"Baby Carrier\",\n    \"url\": \"https://www.amazon.co.uk/dp/B0792ZS2GP\"\n}"
						},
						"url": {
							"raw": "https://{{notfound_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/notfound",
							"protocol": "https",
							"host": [
								"{{notfound_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"notfound"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "add product to list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39a8b77a-106d-457c-880b-5302d5fc0ac3",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "079e2749-9efe-4aa0-a29a-cdd3e7070555",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 1,\n    \"productType\": \"notfound\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/product/{{nf_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"product",
								"{{nf_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "update product details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30ae7ed4-2d19-4bd0-805c-03b2b8febab4",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Product should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData['products-product-created_succeeded']['brand']['S']).to.eql(\"BABYBJÃ–RN\");",
									"    pm.expect(jsonData['products-product-created_succeeded']['details']['S']).to.eql(\"Baby Carrier One, Cotton Mix, Denim Grey/Dark Grey\");",
									"    pm.expect(jsonData['products-product-created_succeeded']['retailer']['S']).to.eql(\"amazon.co.uk\");",
									"    pm.expect(jsonData['products-product-created_succeeded']['price']['S']).to.eql(\"100.00\");",
									"    pm.expect(jsonData['products-product-created_succeeded']['imageUrl']['S']).to.eql(\"//ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B0792ZS2GP&Format=_SL250_&ID=AsinImage&MarketPlace=GB&ServiceVersion=20070822&WS=1&tag=ewelists-21&language=en_GB\");",
									"    pm.expect(jsonData['products-product-created_succeeded']['productUrl']['S']).to.eql(\"https://www.amazon.co.uk/dp/B0792ZS2GP/ref=as_li_ss_il?ie=UTF8&linkCode=li3&tag=ewelists-21&linkId=00f788f132fc05940f26eb7f88a48a7c&language=en_GB\");",
									"});",
									"",
									"",
									"pm.test(\"NotFound product should be deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData['notfound-product-deleted_succeeded']['brand']['S']).to.eql(\"BABYBJÃ–RN\");",
									"    pm.expect(jsonData['notfound-product-deleted_succeeded']['details']['S']).to.eql(\"Baby Carrier\");",
									"    pm.expect(jsonData['notfound-product-deleted_succeeded']['productUrl']['S']).to.eql(\"https://www.amazon.co.uk/dp/B0792ZS2GP\");",
									"});",
									"",
									"pm.test(\"Product should be deleted from list\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData['lists-notfound-deleted_succeeded'].length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Product should be added to list\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData['lists-products-added_succeeded'].length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Product IDs should match\", function () {",
									"    var jsonData = pm.response.json();",
									"    var products_added = jsonData['products-product-created_succeeded']",
									"    var products_added_id = 'PRODUCT#' + products_added['productId']['S']",
									"    var lists_products_added = jsonData['lists-products-added_succeeded'][0]",
									"    pm.expect(products_added_id).to.eql(lists_products_added['SK']['S']);",
									"});",
									"",
									"pm.test(\"Add variable for new Product ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    var products_added = jsonData['products-product-created_succeeded']",
									"    var products_added_id = products_added['productId']['S']",
									"    pm.environment.set(\"p_product_id\", products_added_id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"brand\": \"BABYBJÃ–RN\",\n    \"details\": \"Baby Carrier One, Cotton Mix, Denim Grey/Dark Grey\",\n    \"retailer\": \"amazon.co.uk\",\n    \"imageUrl\": \"//ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B0792ZS2GP&Format=_SL250_&ID=AsinImage&MarketPlace=GB&ServiceVersion=20070822&WS=1&tag=ewelists-21&language=en_GB\",\n    \"price\": \"100.00\",\n    \"productUrl\": \"https://www.amazon.co.uk/dp/B0792ZS2GP/ref=as_li_ss_il?ie=UTF8&linkCode=li3&tag=ewelists-21&linkId=00f788f132fc05940f26eb7f88a48a7c&language=en_GB\"\n}"
						},
						"url": {
							"raw": "https://{{tools_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/tools/notfound/{{nf_product_id}}",
							"protocol": "https",
							"host": [
								"{{tools_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"tools",
								"notfound",
								"{{nf_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8087398d-9e39-4b14-a634-8e12f55c25ff",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response should have a delete count\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.eql(2);",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"list_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "10d6d4fd-3465-4921-927b-acd6c4a8b8fe",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c50937ff-e9ff-46b4-867b-216b85fbf536",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"p_product_id\")",
									"    pm.environment.unset(\"nf_product_id\")",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaf6f07d-3879-4141-9b6a-ea8526e44b0c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{products_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/products/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{products_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"products",
								"{{p_product_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Notfound tests",
			"item": [
				{
					"name": "create item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46ac4159-c83e-4169-85e3-76422ac4ecc6",
								"exec": [
									"pm.test(\"Add variable for new Product ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    productId = jsonData[\"productId\"];",
									"    pm.environment.set(\"nf_product_id\", productId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var productId = jsonData['productId'];",
									"    pm.expect(productId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"brand\": \"Mamas & Papas\",\n    \"details\": \"Hilston Nursing Chair - Silver\",\n    \"url\": \"https://www.mamasandpapas.com/en-gb/hilston-nursing-chair-duck-egg/p/chnsoa100\"\n}"
						},
						"url": {
							"raw": "https://{{notfound_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/notfound",
							"protocol": "https",
							"host": [
								"{{notfound_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"notfound"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "create list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c55eb960-83a9-49c0-b2f5-50122b8c62b1",
								"exec": [
									"pm.test(\"Add variable for new List ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    listId = jsonData[\"listId\"];",
									"    pm.environment.set(\"list_id\", listId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var listId = jsonData['listId'];",
									"    pm.expect(listId.length).to.eql(36);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Birthday List\",\n    \"description\": \"A gift wish list for my birthday.\",\n    \"eventDate\": \"20 December 2020\",\n    \"occasion\": \"Birthday\",\n    \"imageUrl\": \"/images/celebration-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "add product to list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39f02997-9190-498e-961d-e5b65feec471",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4469b147-e356-4bac-963e-57aee793ae24",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 1,\n    \"productType\": \"notfound\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/product/{{nf_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"product",
								"{{nf_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get count",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a37a0126-c7fb-4a93-bbc5-90c277e02db7",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{tools_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/tools/notfound/count",
							"protocol": "https",
							"host": [
								"{{tools_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"tools",
								"notfound",
								"count"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a33ff5a1-ad1e-4f21-a8b8-35bc529f8475",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var items = jsonData['items'];",
									"    pm.expect(items.length).to.above(0);",
									"});",
									"",
									"// pm.test(\"The returned object should contain the correct product details\", function () {",
									"//     var jsonData = pm.response.json();",
									"//     var items = jsonData['items'];",
									"//     pm.expect(items[0].productId.length).to.eql(36);",
									"//     pm.expect(items[0].brand).to.eql(\"Mamas & Papas\");",
									"//     pm.expect(items[0].details).to.eql(\"Hilston Nursing Chair - Silver\");",
									"//     pm.expect(items[0].productUrl).to.eql(\"https://www.mamasandpapas.com/en-gb/hilston-nursing-chair-duck-egg/p/chnsoa100\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{tools_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/tools/notfound",
							"protocol": "https",
							"host": [
								"{{tools_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"tools",
								"notfound"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a403d60c-5c01-4730-875d-d74750895578",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct product details\", function () {",
									"    var item = pm.response.json();",
									"    pm.expect(item.productId.length).to.eql(36);",
									"    pm.expect(item.brand).to.eql(\"Mamas & Papas\");",
									"    pm.expect(item.details).to.eql(\"Hilston Nursing Chair - Silver\");",
									"    pm.expect(item.productUrl).to.eql(\"https://www.mamasandpapas.com/en-gb/hilston-nursing-chair-duck-egg/p/chnsoa100\");",
									"    pm.expect(item.creatorsName).to.eql(\"Ewe Api1\");",
									"    pm.expect(item.listId.length).to.eql(36);",
									"    pm.expect(item.listTitle).to.eql(\"My Birthday List\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{tools_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/tools/notfound/{{nf_product_id}}",
							"protocol": "https",
							"host": [
								"{{tools_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"tools",
								"notfound",
								"{{nf_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07c3f944-da1f-4219-9aeb-bce6f9980a33",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"nf_product_id\")",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9de63e50-e02f-46ce-91e5-05e054c51e95",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{notfound_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/notfound/{{nf_product_id}}",
							"protocol": "https",
							"host": [
								"{{notfound_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"notfound",
								"{{nf_product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "827feb36-8821-47db-b760-8a4f62165c13",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response should have a delete count\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.eql(2);",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"list_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8f0be130-2fb1-441d-9481-334864af700b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Products tests",
			"item": [
				{
					"name": "create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9506b96-90d5-4f93-bf52-bfc962264f85",
								"exec": [
									"pm.test(\"Add variable for new Product ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    productId = jsonData[\"productId\"];",
									"    pm.environment.set(\"p_product_id\", productId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var productId = jsonData['productId'];",
									"    pm.expect(productId.length).to.eql(36);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "31eed982-3669-4b69-b632-545d9c520213",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"retailer\": \"amazon.co.uk\",\n    \"brand\": \"BABYBJÃ–RN\",\n    \"details\": \"Travel Cot Easy Go, Anthracite, with transport bag\",\n    \"price\": \"120.99\",\n    \"productUrl\": \"https://www.amazon.co.uk/dp/B01H24LM58\",\n    \"imageUrl\": \"https://images-na.ssl-images-amazon.com/images/I/81qYpf1Sm2L._SX679_.jpg\",\n    \"test\": \"{{create_test}}\",\n    \"staging\": {{create_staging}},\n    \"prod\": {{create_prod}}\n}"
						},
						"url": {
							"raw": "https://{{tools_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/tools/products",
							"protocol": "https",
							"host": [
								"{{tools_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"tools",
								"products"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70a01c6f-eddc-454d-8f87-ef8fa65c8bd3",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct product details\", function () {",
									"    var product_obj = pm.response.json();",
									"    pm.expect(product_obj.productId.length).to.eql(36);",
									"    // pm.expect(product_obj.retailer).to.eql(\"amazon\");",
									"    pm.expect(product_obj.brand).to.eql(\"BABYBJÃ–RN\");",
									"    pm.expect(product_obj.details).to.eql(\"Travel Cot Easy Go, Anthracite, with transport bag\");",
									"    pm.expect(product_obj.imageUrl).to.eql(\"https://images-na.ssl-images-amazon.com/images/I/81qYpf1Sm2L._SX679_.jpg\");",
									"    pm.expect(product_obj.productUrl).to.eql(\"https://www.amazon.co.uk/dp/B01H24LM58\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{tools_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/tools/products/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{tools_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"tools",
								"products",
								"{{p_product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check product across environments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b12316e2-eec9-4ed6-b3a5-68bfa6a265bb",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct product details\", function () {",
									"    var response_obj = pm.response.json();",
									"    product = response_obj.product;",
									"    pm.expect(product.productId.length).to.eql(36);",
									"    pm.expect(product.retailer).to.eql(\"amazon.co.uk\");",
									"    pm.expect(product.brand).to.eql(\"BABYBJÃ–RN\");",
									"    pm.expect(product.details).to.eql(\"Travel Cot Easy Go, Anthracite, with transport bag\");",
									"    pm.expect(product.imageUrl).to.eql(\"https://images-na.ssl-images-amazon.com/images/I/81qYpf1Sm2L._SX679_.jpg\");",
									"    pm.expect(product.productUrl).to.eql(\"https://www.amazon.co.uk/dp/B01H24LM58\");",
									"",
									"    pm.expect(response_obj.test_environment_states).to.exist;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{tools_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/tools/products/check/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{tools_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"tools",
								"products",
								"check",
								"{{p_product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecbe7c88-58c8-459e-881a-421fe8d97852",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['test']).to.exist;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"retailer\": \"amazon.co.uk\",\n    \"brand\": \"BABYBJÃ–RN\",\n    \"details\": \"Updated\",\n    \"price\": \"100.00\",\n    \"productUrl\": \"https://www.amazon.co.uk/dp/1234567890\",\n    \"imageUrl\": \"https://images-na.ssl-images-amazon.com/images/I/81qYpf1Sm2L._SX679_.jpg\",\n    \"test\": \"{{create_test}}\",\n    \"staging\": {{create_staging}},\n    \"prod\": {{create_prod}}\n}"
						},
						"url": {
							"raw": "https://{{tools_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/tools/products/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{tools_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"tools",
								"products",
								"{{p_product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0de7d16a-e143-461e-8740-8f9d14b2811d",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"p_product_id\")",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5cc549a7-76d8-430e-8ace-8581c2525bd1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{products_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/products/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{products_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"products",
								"{{p_product_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0f425c32-b88d-4c43-9f38-737981fe646a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ddfc44c9-3bcd-43f0-8de3-7b7b2bbed0d3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless resources for Tools service.

Globals:
    Function:
        Timeout: 10

Parameters:
  Environment:
    Description: Environment type.
    Default: test
    Type: String
    AllowedValues:
      - prod
      - staging
      - dev
      - test
    ConstraintDescription: must specify prod, staging, dev or test.
  ServiceName:
    Description: Service name.
    Default: tools
    Type: String
  DomainName:
    Description: Domain name for your website (example.com)
    Type: String
    AllowedPattern: "^[a-z0-9-.]*.com$"
    ConstraintDescription: Must be a web domain, ending in .com. Can include lower case letters, numbers and hypens.
    Default: tools.ewelists.com
  PhoneNumber:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /Ewelists/AlertNumber
  EmailAddress:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /Ewelists/AlertEmail
  ListsTable:
    Description: List table name prefix.
    Default: lists
    Type: String
  NotFoundTable:
    Description: NotFound table name prefix.
    Default: notfound
    Type: String
  ProductsTable:
    Description: Products table name prefix.
    Default: products
    Type: String
  CrossAccountRole:
    Description: Prefix for role that allows lambda function to execute dynamodb tasks against a table in another environments account.
    Default: Tools-Service-Cross-Account-Exection-Role
    Type: String


Conditions:
  Staging: !Equals [ !Ref Environment, staging ]
  Prod: !Equals [ !Ref Environment, prod ]
  CreateResources: !Or [!Equals [!Ref "Environment", prod], !Equals [!Ref "Environment", staging]]

Resources:
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ServiceName}-${Environment}-Api-Role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: ProductsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
                Resource:
                  !If
                    - Prod
                    -
                      - !Sub "arn:aws:dynamodb:${AWS::Region}:{{resolve:ssm:/accounts/prod:1}}:table/lists-prod*"
                      - !Sub "arn:aws:dynamodb:${AWS::Region}:{{resolve:ssm:/accounts/prod:1}}:table/lists-prod/*"
                      - !Sub "arn:aws:dynamodb:${AWS::Region}:{{resolve:ssm:/accounts/prod:1}}:table/notfound-prod"
                      - !Sub "arn:aws:dynamodb:${AWS::Region}:{{resolve:ssm:/accounts/prod:1}}:table/products-prod"
                    - !If
                      - Staging
                      -
                        - !Sub "arn:aws:dynamodb:${AWS::Region}:{{resolve:ssm:/accounts/staging:1}}:table/lists-staging*"
                        - !Sub "arn:aws:dynamodb:${AWS::Region}:{{resolve:ssm:/accounts/staging:1}}:table/lists-staging/*"
                        - !Sub "arn:aws:dynamodb:${AWS::Region}:{{resolve:ssm:/accounts/staging:1}}:table/notfound-staging"
                        - !Sub "arn:aws:dynamodb:${AWS::Region}:{{resolve:ssm:/accounts/staging:1}}:table/products-staging"
                      -
                        - !Sub "arn:aws:dynamodb:${AWS::Region}:{{resolve:ssm:/accounts/dev:1}}:table/lists-test"
                        - !Sub "arn:aws:dynamodb:${AWS::Region}:{{resolve:ssm:/accounts/dev:1}}:table/lists-test/*"
                        - !Sub "arn:aws:dynamodb:${AWS::Region}:{{resolve:ssm:/accounts/dev:1}}:table/notfound-test"
                        - !Sub "arn:aws:dynamodb:${AWS::Region}:{{resolve:ssm:/accounts/dev:1}}:table/products-test"
        - PolicyName: AssumeCrossAccountExecutionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  !If
                    - Prod
                    -
                      - !Sub "arn:aws:iam::{{resolve:ssm:/accounts/dev:1}}:role/${CrossAccountRole}-prod"
                      - !Sub "arn:aws:iam::{{resolve:ssm:/accounts/staging:1}}:role/${CrossAccountRole}-prod"
                    - !If
                      - Staging
                      -
                        - !Sub "arn:aws:iam::{{resolve:ssm:/accounts/dev:1}}:role/${CrossAccountRole}-staging"
                      -
                        - !Sub "arn:aws:iam::{{resolve:ssm:/accounts/staging:1}}:role/${CrossAccountRole}-test"

  AddProductDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-update_users_gifts-${Environment}'
      Handler: tools/update_users_gifts.handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 3
      Description: Gets a product from the products table
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          PRODUCTS_TABLE_NAME: !Sub "${ProductsTable}-${Environment}"
          NOTFOUND_TABLE_NAME: !Sub "${NotFoundTable}-${Environment}"
          LISTS_TABLE_NAME: !Sub "${ListsTable}-${Environment}"
      Events:
        CreateProduct:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /tools/notfound/{id}
            Method: POST

  NotFoundCountFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-notfound_item_count-${Environment}'
      Handler: tools/notfound_count.handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 3
      Description: Returns the number of items in the notfound table.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          NOTFOUND_TABLE_NAME: !Sub "${NotFoundTable}-${Environment}"
      Events:
        GetCount:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /tools/notfound/count
            Method: GET

  NotFoundListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-notfound_list_items-${Environment}'
      Handler: tools/notfound_list.handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 3
      Description: Returns the number of items in the notfound table.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          NOTFOUND_TABLE_NAME: !Sub "${NotFoundTable}-${Environment}"
      Events:
        GetProducts:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /tools/notfound
            Method: GET

  NotfoundGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-notfound_get-${Environment}'
      Handler: tools/notfound_get.handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 3
      Description: Returns the an item from the notfound table.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          NOTFOUND_TABLE_NAME: !Sub "${NotFoundTable}-${Environment}"
          LISTS_TABLE_NAME: !Sub "${ListsTable}-${Environment}"
      Events:
        GetProducts:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /tools/notfound/{id}
            Method: GET

  ProductsCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-products_create-${Environment}'
      Handler: tools/products_create.handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 3
      Description: Creates a new product in the products table
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          PRODUCTS_TEST_TABLE_NAME: !Sub "${ProductsTable}-test"
          PRODUCTS_STAGING_TABLE_NAME: !Sub "${ProductsTable}-staging"
          PRODUCTS_PROD_TABLE_NAME: !Sub "${ProductsTable}-prod"
          ACCOUNT_ID_PROD: '{{resolve:ssm:/accounts/prod:1}}'
          ACCOUNT_ID_STAGING: '{{resolve:ssm:/accounts/staging:1}}'
          ACCOUNT_ID_TEST: '{{resolve:ssm:/accounts/dev:1}}'
          CROSS_ACCOUNT_ROLE: !Ref CrossAccountRole
      Events:
        CreateProduct:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /tools/products
            Method: POST

  ProductsGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-products_get-${Environment}'
      Handler: tools/products_get.handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 3
      Description: Returns the an item from the products table.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          PRODUCTS_TABLE_NAME: !Sub "${ProductsTable}-${Environment}"
      Events:
        GetProducts:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /tools/products/{id}
            Method: GET

  ProductsUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-products_update-${Environment}'
      Handler: tools/products_update.handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 3
      Description: Updates an item from the products table.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          PRODUCTS_TEST_TABLE_NAME: !Sub "${ProductsTable}-test"
          PRODUCTS_STAGING_TABLE_NAME: !Sub "${ProductsTable}-staging"
          PRODUCTS_PROD_TABLE_NAME: !Sub "${ProductsTable}-prod"
          ACCOUNT_ID_PROD: '{{resolve:ssm:/accounts/prod:1}}'
          ACCOUNT_ID_STAGING: '{{resolve:ssm:/accounts/staging:1}}'
          ACCOUNT_ID_TEST: '{{resolve:ssm:/accounts/dev:1}}'
          CROSS_ACCOUNT_ROLE: !Ref CrossAccountRole
      Events:
        GetProducts:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /tools/products/{id}
            Method: PUT

  ProductsCheckAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-products_check_all-${Environment}'
      Handler: tools/products_check_all.handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 3
      Description: Creates a new product in the products table
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          PRODUCTS_TEST_TABLE_NAME: !Sub "${ProductsTable}-test"
          PRODUCTS_STAGING_TABLE_NAME: !Sub "${ProductsTable}-staging"
          PRODUCTS_PROD_TABLE_NAME: !Sub "${ProductsTable}-prod"
          ACCOUNT_ID_PROD: '{{resolve:ssm:/accounts/prod:1}}'
          ACCOUNT_ID_STAGING: '{{resolve:ssm:/accounts/staging:1}}'
          ACCOUNT_ID_TEST: '{{resolve:ssm:/accounts/dev:1}}'
          CROSS_ACCOUNT_ROLE: !Ref CrossAccountRole
          PRIMARY_ENVIRONMENT:
            !If [Prod, 'prod',
              !If [Staging, 'staging', 'test']
            ]
          UPDATE_ENVIRONMENTS:
            !If [Prod, 'test,staging',
              !If [Staging, 'test', 'staging']
            ]
      Events:
        CheckProduct:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /tools/products/check/{id}
            Method: GET

  QueryUrlMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-query_url_metadata-${Environment}'
      Handler: tools/url_metadata.handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 3
      Description: Queries the url opengraph metadata.
      Role: !GetAtt FunctionRole.Arn
      Events:
        GetUrl:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /tools/query/metadata/{url}
            Method: GET

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
          MetricsEnabled: false
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: !Sub '${ServiceName}-${Environment}'
        schemes:
        - "https"
        paths:
          "/tools/query/metadata/{url}":
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryUrlMetadataFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/tools/notfound":
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotFoundListFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/tools/notfound/{id}":
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotfoundGetFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            post:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddProductDetailsFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/tools/notfound/count":
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotFoundCountFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/tools/products":
            post:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductsCreateFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/tools/products/{id}":
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductsGetFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            put:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductsUpdateFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/tools/products/check/{id}":
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductsCheckAllFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
        securityDefinitions:
          sigv4:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "awsSigv4"

  NotFoundCheckFunction:
    Type: AWS::Serverless::Function
    Condition: CreateResources
    Properties:
      FunctionName: !Sub '${ServiceName}-notfound_check-${Environment}'
      Handler: tools/notfound_check.handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 5
      Description: Runs on a regular schedule to check if there items in the NotFound table and send an SMS message if there are.
      Role: !GetAtt NotFoundCheckFunctionRole.Arn
      Environment:
        Variables:
          NOTFOUND_TABLE_NAME: !Sub "${NotFoundTable}-${Environment}"
          TOPIC_ARN: !Ref NotFoundCheckAlertTopic
      Events:
        CheckItemsScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0/30 * * * ? *)

  NotFoundCheckAlertTopic:
    Type: AWS::SNS::Topic
    Condition: CreateResources
    Properties:
      TopicName: !Sub "NotFound-Alert-${Environment}"
      DisplayName: !Sub 'NotFound Item Alert (${Environment})'
      Subscription:
        - Endpoint: !Ref PhoneNumber
          Protocol: sms
        - Endpoint: !Ref EmailAddress
          Protocol: email

  NotFoundCheckErrorTopic:
    Type: AWS::SNS::Topic
    Condition: CreateResources
    Properties:
      TopicName: !Sub "NotFound-Check-Error-${Environment}"
      DisplayName: !Sub 'NotFound Check Failed with Error (${Environment})'
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email

  NotFoundCheckFailedTopic:
    Type: AWS::SNS::Topic
    Condition: CreateResources
    Properties:
      TopicName: !Sub "NotFound-Check-Failed-${Environment}"
      DisplayName: !Sub 'NotFound Did Not Run On Schedule (${Environment})'
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email

  NotFoundCheckFailedAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateResources
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref NotFoundCheckErrorTopic
      AlarmDescription: "Checks that the backups have not been failing."
      AlarmName: !Sub "NotFound Check Failed ${Environment}"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref NotFoundCheckFunction
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      Period: 1800
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Threshold: 0.0
      TreatMissingData: missing
      InsufficientDataActions:
        - !Ref NotFoundCheckFailedTopic

  NotFoundCheckFunctionRole:
    Type: AWS::IAM::Role
    Condition: CreateResources
    Properties:
      RoleName: !Sub '${ServiceName}-${Environment}-NotFoundCheck-Role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: ProductsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Scan'
                Resource:
                  - !Sub
                    - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}*"
                    - tablename: !Sub "${NotFoundTable}-${Environment}"
              - Effect: Allow
                Action:
                  - 'sns:publish'
                Resource:
                  - !Ref NotFoundCheckAlertTopic

  BackupFunction:
    Type: AWS::Serverless::Function
    Condition: CreateResources
    Properties:
      FunctionName: !Sub '${ServiceName}-backup-${Environment}'
      Handler: tools/backup.handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 10
      Description: Runs on a regular schedule to create backups of the lists and products tables.
      Role: !GetAtt BackupFunctionRole.Arn
      Environment:
        Variables:
          RETENTION_DAYS: "7"
          PRODUCTS_TABLE_NAME: !Sub "${ProductsTable}-${Environment}"
          LISTS_TABLE_NAME: !Sub "${ListsTable}-${Environment}"
      Events:
        BackupsScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 6 * * ? *)

  BackupErrorTopic:
    Type: AWS::SNS::Topic
    Condition: CreateResources
    Properties:
      TopicName: !Sub "Backup-Error-${Environment}"
      DisplayName: !Sub 'Backup Failed with Error (${Environment})'
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email

  BackupFailedTopic:
    Type: AWS::SNS::Topic
    Condition: CreateResources
    Properties:
      TopicName: !Sub "Backup-Failed-${Environment}"
      DisplayName: !Sub 'Backup Did Not Run On Schedule (${Environment})'
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email

  BackupFailedAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateResources
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref BackupErrorTopic
      AlarmDescription: "Checks that the backups have not been failing."
      AlarmName: !Sub "Backup Failed ${Environment}"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref BackupFunction
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      Period: 86400
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Threshold: 0.0
      TreatMissingData: missing
      InsufficientDataActions:
        - !Ref BackupFailedTopic

  BackupFunctionRole:
    Type: AWS::IAM::Role
    Condition: CreateResources
    Properties:
      RoleName: !Sub '${ServiceName}-${Environment}-Backup-Role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: ProductsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:CreateBackup
                  - dynamodb:DeleteBackup
                  - dynamodb:ListBackups
                Resource:
                  - !Sub
                    - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}*"
                    - tablename: !Sub "${ListsTable}-${Environment}"
                  - !Sub
                    - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}*"
                    - tablename: !Sub "${ProductsTable}-${Environment}"

  # Default400GatewayResponse:
  #   Type: AWS::ApiGateway::GatewayResponse
  #   Properties:
  #       ResponseParameters:
  #           gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  #           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
  #       ResponseType: DEFAULT_4XX
  #       RestApiId: !Ref Api
  #
  # Default500GatewayResponse:
  #   Type: AWS::ApiGateway::GatewayResponse
  #   Properties:
  #       ResponseParameters:
  #           gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  #           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
  #       ResponseType: DEFAULT_5XX
  #       RestApiId: !Ref Api

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL for stage of Service
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/${ServiceName}/'

  ApiId:
    Description: ID for the API
    Value: !Ref Api

  FunctionIamRole:
    Description: Implicit IAM Role created for function
    Value: !GetAtt FunctionRole.Arn
